// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  slug              String    @unique
  name              String
  email             String?   @unique
  password          String
  profilePicture    String?
  bio               String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  mod               Boolean   @default(false)
  admin             Boolean   @default(false)

  // Relations
  posts             Post[]    @relation(name: "PostToAuthor")
  likes             Like[]
  comments          Comment[]
  ownedGames        Game[]    @relation(name: "GameToAuthor")
  contributedGames  Game[]
  jams              Jam[]
  reports           Report[]  @relation(name: "ReportToUser")
  createdReports    Report[]  @relation(name: "ReportToReporter")
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

model TagCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  priority    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation
  tags        Tag[]
}

model Tag {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  autoRegex   String?
  alwaysAdded Boolean       @default(false)
  priority    Priority      @default(MEDIUM)
  modOnly     Boolean       @default(false)
  icon        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  posts       Post[]
  category    TagCategory?  @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model CustomTag {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  posts       Post[]
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author      User      @relation(fields: [authorId], references: [id], name: "PostToAuthor")
  authorId    Int
  tags        Tag[]
  customTags  CustomTag[]
  comments    Comment[]
  likes       Like[]    @relation(name: "LikeToPost")
  reports     Report[]  @relation(name: "ReportToPost")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  likes     Like[]    @relation(name: "LikeToComment")
  reports   Report[]  @relation(name: "ReportToComment")
}

model Jam {
  id              Int       @id @default(autoincrement())
  name            String
  startTime       DateTime  @default(now())
  ratingHours     Int
  slaughterHours  Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  games           Game[]    @relation(name: "GameToEvent")
  users           User[]
}

model Game {
  id            Int       @id @default(autoincrement())
  slug          String
  name          String
  description   String?
  thumbnail     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  author        User      @relation(fields: [authorId], references: [id], name: "GameToAuthor")
  authorId      Int
  contributors  User[]
  jam           Jam       @relation(fields: [jamId], references: [id], name: "GameToEvent")
  jamId         Int
  reports       Report[]  @relation(name: "ReportToGame")
}

model Like {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  post        Post?     @relation(fields: [postId], references: [id], name: "LikeToPost")
  postId      Int?
  comment     Comment?  @relation(fields: [commentId], references: [id], name: "LikeToComment")
  commentId   Int?
}

model FeaturedStreamer {
  id           Int      @id @default(autoincrement()) 
  userName     String   
  thumbnailUrl String   
  streamTitle  String   
  streamTags   String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Report {
  id          Int       @id @default(autoincrement()) 
  resolved    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  reporter    User      @relation(fields: [reporterId], references: [id], name: "ReportToReporter")
  reporterId  Int
  user        User?     @relation(fields: [userId], references: [id], name: "ReportToUser")
  userId      Int
  post        Post?     @relation(fields: [postId], references: [id], name: "ReportToPost")
  postId      Int?
  comment     Comment?  @relation(fields: [commentId], references: [id], name: "ReportToComment")
  commentId   Int?
  game        Game?     @relation(fields: [gameId], references: [id], name: "ReportToGame")
  gameId      Int?
}