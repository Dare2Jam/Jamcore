// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  slug              String    @unique
  name              String
  email             String?   @unique
  password          String
  profilePicture    String?
  bio               String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  posts             Post[]    @relation(name: "PostToAuthor")
  likes             Like[]
  comments          Comment[]
  ownedGames        Game[]    @relation(name: "GameToAuthor")
  contributedGames  Game[]
  jams              Jam[]
}

model Flair {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?

  // Relations
  posts           Post[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  author    User      @relation(fields: [authorId], references: [id], name: "PostToAuthor")
  authorId  Int
  flairs    Flair[]
  comments  Comment[]
  likes     Like[]    @relation(name: "LikeToPost")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  likes     Like[]    @relation(name: "LikeToComment")
}

model Jam {
  id              Int       @id @default(autoincrement())
  name            String
  startTime       DateTime  @default(now())
  ratingHours     Int
  slaughterHours  Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  games           Game[]    @relation(name: "GameToEvent")
  users           User[]
}

model Game {
  id            Int       @id @default(autoincrement())
  slug          String
  name          String
  description   String?
  thumbnail     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  author        User      @relation(fields: [authorId], references: [id], name: "GameToAuthor")
  authorId      Int
  contributors  User[]
  jam           Jam       @relation(fields: [jamId], references: [id], name: "GameToEvent")
  jamId         Int
}

model Like {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  post        Post?     @relation(fields: [postId], references: [id], name: "LikeToPost")
  postId      Int?
  comment     Comment?  @relation(fields: [commentId], references: [id], name: "LikeToComment")
  commentId   Int?
}